---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Release.Name }}-nginx-tls"
type: Opaque
data:
  cert.crt: {{ .Values.nginx.ssl.cert | b64enc }}
  cert.key: {{ .Values.nginx.ssl.certKey | b64enc }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Release.Name }}-config"
  labels:
    release: "{{ .Release.Name }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app: "stratos-metrics-{{.Values.cfName}}"
data:
  prometheus-config: |
    global:
      scrape_interval:     "{{.Values.prometheus.scrapeInterval}}"
      evaluation_interval: "{{.Values.prometheus.evaluationInterval}}"
      external_labels:
          monitor: 'test-monitor'
    scrape_configs:
      - job_name: "{{.Values.cfName}}"
        scrape_interval: "{{.Values.prometheus.scrapeInterval}}"
        static_configs:
        - targets: ["{{.Values.firehoseExporter.serviceName}}:{{.Values.firehoseExporter.servicePort}}", "{{.Values.prometheus.serviceName}}:{{.Values.prometheus.servicePort}}"]
  nginx-metadata: |
    [
      {
        "type": "cf",
      {{- if .Values.env.DOMAIN }}  
        "url": "wss://doppler.{{ .Values.env.DOMAIN }}:4443",
      {{- else }}
        "url": "{{ .Values.firehoseExporter.dopplerUrl }}",
      {{- end }}
        "job": "{{ .Values.cfName }}"
      }
    ]
  nginx-config: |
    upstream prometheus {
        least_conn;
        server                      prometheus-service:9090;
        keepalive                   32;
    }
    server {
      listen                      443 ssl;

      ssl_certificate             /etc/secrets/cert.crt;
      ssl_certificate_key         /etc/secrets/cert.key;
      ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;
      ssl_ciphers                 HIGH:!aNULL:!MD5;

      client_max_body_size        50M;

      location /stratos { 
          alias /etc/nginx/conf.d/metadata.json;
          auth_basic "metrics-auth";
          auth_basic_user_file /etc/nginx/.htpasswd;
      }

      location / {
          proxy_pass_header       Server;
          proxy_set_header        Host $http_host;
          proxy_redirect          off;
          proxy_set_header        X-Real-IP $remote_addr;
          proxy_set_header        X-Scheme $scheme;
          proxy_pass              http://prometheus/;
          proxy_intercept_errors  on;
          proxy_http_version      1.1;
          auth_basic "metrics-auth";
          auth_basic_user_file /etc/nginx/.htpasswd;
      }
    }
