---
platform: linux
inputs:
- name: metrics
- name: helm-repo
- name: image-tag
outputs:
- name: helm-chart
image_resource:
  type: docker-image
  source:
   repository: splatform/stratos-ci-concourse
   tag: "latest"

run:
  path: bash
  args:
    - -xc
    - |

      helm init --client-only
      ROOT_DIR=$PWD
      STRATOS_METRICS=${ROOT_DIR}/metrics
      IMAGE_TAG_DIR=${ROOT_DIR}/image-tag
      HELM_REPO=${ROOT_DIR}/helm-repo
      TAG=$(cat ${IMAGE_TAG_DIR}/release-tag)
      COMMIT=$(cat ${IMAGE_TAG_DIR}/commit)
      RELEASE_VERSION=$(cat ${IMAGE_TAG_DIR}/tag)
      GIT_TAG=$(cat ${IMAGE_TAG_DIR}/tag)

      if [ "${GIT_TAG_SUFFIX}" != "null" ]; then
        GIT_TAG="${GIT_TAG}-${GIT_TAG_SUFFIX}"
      fi

      set +x
      echo ""
      echo "====================================="
      echo "Tag             : $TAG"
      echo "Commit          : $COMMIT"
      echo "Release Version : $RELEASE_VERSION"
      echo "====================================="
      echo ""
      set -x

      # Helper
      source ${STRATOS_METRICS}/build/ci/tasks/create-chart-helper.sh

      cd ${STRATOS_METRICS}
      CHART_PATH=${STRATOS_METRICS}
      echo "$CHART_PATH"
      
      VERSION=$(cat Chart.yaml | grep version | cut -d' ' -f2 | tr -d '\n')
      echo "${VERSION}"

      # Required for setupAndPushChange commit message
      IMAGE_TAG=${TAG}
      patchHelmChart ${TAG} ${DOCKER_ORG} ${DOCKER_REGISTRY} . ${RELEASE_VERSION}

      set +x
      echo "Patched Chart.yaml ..."
      cat Chart.yaml
      set -x
      
      CHART_FILENAME="metrics-helm-chart-${RELEASE_VERSION}-${COMMIT}.tgz"
      if [ "${CHART_SUFFIX}" != "null" ]; then
        CHART_FILENAME="metrics-helm-chart-${RELEASE_VERSION}-${COMMIT}-${CHART_SUFFIX}.tgz"
      fi

      # Generate Helm package
      updateHelmDependency

      # Generate imagelist.txt (needs to be done after the dependencies have been updated)
      ${STRATOS_METRICS}/build/imagelist-gen.sh .

      helm package ./
      mv metrics-*.tgz ${ROOT_DIR}/helm-chart/${CHART_FILENAME}
      cd ${ROOT_DIR}/helm-chart/
      if [ -f ${HELM_REPO}/index.yaml ]; then
        cp ${HELM_REPO}/index.yaml ${ROOT_DIR}/helm-chart/
        MERGE_INDEX="--merge index.yaml"
      fi
      
      # Update Helm Repository
      helm repo index ./ ${MERGE_INDEX} --url https://github.com/${GITHUB_ORG}/${GITHUB_REPO}/releases/download/${RELEASE_VERSION}/
      cp index.yaml ${HELM_REPO}
      cd ${HELM_REPO}
      setupAndPushChange
