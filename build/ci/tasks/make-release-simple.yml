# Used by the SUSE Cloud Application Platform version

---
platform: linux
inputs:
- name: metrics
- name: helm-repo
outputs:
- name: helm-chart
image_resource:
  type: docker-image
  source:
   # Generated using scripts/Dockerfile.stratos-ci
   repository: splatform/stratos-ci-concourse
   tag: "latest"
run:
  path: sh
  args:
    - -exc
    - |
      # Initialize Helm for client-side use
      helm init --client-only
      ROOT_DIR=$PWD
      STRATOS_METRICS=${ROOT_DIR}/metrics
      source ${STRATOS_METRICS}/build/ci/tasks/create-chart-helper.sh
      source ${STRATOS_METRICS}/build/ci/tasks//github-helper.sh
      SOURCE_REPO=${SOURCE_REPO_ORG}/${SOURCE_REPO_REPO}
      ARTIFACT_REPO=${GITHUB_USER}/${GITHUB_REPO}

      HELM_REPO=${ROOT_DIR}/helm-repo/${HELM_REPO_PATH}
      HELM_REPOSITORY=${GITHUB_USER}/${GITHUB_REPO}

      # Tags
      cd ${ROOT_DIR}/metrics
      VERSION=$(cat Chart.yaml | grep version | cut -d' ' -f2 | tr -d '\n')
      COMMIT=$(git log -1 --format="%h")
      # RELEASE_TAG is the full tag that started the pipeline, e.g. '1.0.0-rc.1'
      RELEASE_TAG=$(cat .git/ref)
      TAG=$VERSION-${COMMIT}
      if [ "${TAG_SUFFIX}" != "null" ]; then
        TAG=${TAG}-${TAG_SUFFIX}
      fi

      # $VERSION is version number - e.g. 2.3.0
      # Find the last tag created for this release tag
      LAST_TAG=$(git tag --sort=creatordate | grep "$VERSION-" | awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }' | head -n 1)

      VERSION_TAG="$VERSION"
      if [ "${GIT_TAG_SUFFIX}" != "null" ]; then
        VERSION_TAG=${VERSION}-${GIT_TAG_SUFFIX}
      fi

      set +x
      echo "=================================================================================================================="
      echo "Tag             : $TAG"
      echo "Commit          : $COMMIT"
      echo "Release Version : $RELEASE_TAG"
      echo "Version         : $VERSION"
      echo "Last tag        : $LAST_TAG"
      echo "Git Tag Suffix  : $GIT_TAG_SUFFIX"
      echo "Version Tag     : $VERSION_TAG"
      echo "Github User     : $GITHUB_USER"
      echo "Github Repo     : $GITHUB_REPO"
      echo "=================================================================================================================="
      set -x

      IMAGE_TAG=$VERSION_TAG

      # Set git username and password so that we can push changes (Don't log)
      set +x
      setupGitConfig
      set -x

      # Get the commit hash for this tag
      LAST_TAG_COMMIT=$(git rev-list --abbrev-commit -n 1 ${LAST_TAG})
      if [ "$COMMIT" != "$LAST_TAG_COMMIT" ]; then
        echo "Can not make release - no release candidate published"
        echo "The commit for the \"stable\" tag does not match that of the tag \"$LAST_TAG\""
        exit 1
      fi

      echo "Last tag Commit       : $LAST_TAG_COMMIT"

      echo "Making Metrics release"

      # Check what git repository this is
      git remote show origin -n      

      # Check to see if the release tag already exists - if so, abort - we won't re-release
      set +e
      github-release info -t ${VERSION}
      RETVAL=$?
      set -e
      if [ $RETVAL -eq 0 ]; then
        echo "Release already exists... aborting"
        exit 1
      fi

      HELM_CHART_FILENAME=metrics-helm-chart-${LAST_TAG}-${LAST_TAG_COMMIT}.tgz
      if [ "${CHART_SUFFIX}" != "null" ]; then
        HELM_CHART_FILENAME=metrics-helm-chart-${LAST_TAG}-${LAST_TAG_COMMIT}-${CHART_SUFFIX}.tgz
      fi

      if [ "${GIT_TAG_SUFFIX}" != "null" ]; then
        REPO_LAST_TAG="${LAST_TAG}-${GIT_TAG_SUFFIX}"
      else
        REPO_LAST_TAG="${LAST_TAG}"
      fi

      echo "Repo last tag: ${REPO_LAST_TAG}"

      # Need to create the Helm chart
      # Download the Helm chart from the last RC/Beta/Alpha - we'll modify it
      # Note: Use helper to ensure this works with a private GitHub repository
      mkdir tmp
      cd tmp
      echo "Downloaing Metrics Helm Chart for Release Candidate"
      downloadReleaseFile ${GITHUB_TOKEN} ${HELM_REPOSITORY} ${REPO_LAST_TAG} ${HELM_CHART_FILENAME}
      echo "Downloaded Metrics Helm Chart"
      ls -al ${HELM_CHART_FILENAME}
      
      # Unpack the Helm Chart from the release candidate
      tar -xvf ${HELM_CHART_FILENAME}
      echo "Unpacked Metrics Helm Chart for Release Candidate"
      cat metrics/Chart.yaml

      # List all of the files and folders in the Chart
      ls -alR ./metrics
      
      # Just need to change the version in the Chart.yaml file
      sed -i -e 's/version: '"${LAST_TAG}"'/version: '"${VERSION}"'/g' metrics/Chart.yaml  
      cat metrics/Chart.yaml
      # Package modified Helm chart
      HELM_FILE=metrics-helm-chart-${VERSION}-${COMMIT}.tgz
      HELM_ALL_ENABLED_FILE=metrics-helm-chart-${VERSION}-${COMMIT}-release-package.tgz
      if [ "${CHART_SUFFIX}" != "null" ]; then
        HELM_FILE=metrics-helm-chart-${VERSION}-${COMMIT}-${CHART_SUFFIX}.tgz
        HELM_ALL_ENABLED_FILE=metrics-helm-chart-${VERSION}-${COMMIT}-${CHART_SUFFIX}-release-package.tgz
      fi
    
      helm package metrics
      cp metrics-${VERSION}.tgz ${ROOT_DIR}/helm-chart/${HELM_FILE}

      # Create chart with all features enabled
      rm metrics-${VERSION}.tgz

      # This will enable all features
      sed -i -e 's/enabled: false/enabled: true/g' metrics/values.yaml
      helm package metrics
      cp metrics-${VERSION}.tgz ${ROOT_DIR}/helm-chart/${HELM_ALL_ENABLED_FILE}
      
      # Temp folder for helm-chart
      mkdir -p ${ROOT_DIR}/helm-chart

      # Add helm chart to the helm repository
      cd ${ROOT_DIR}/helm-chart/
      if [ -f ${HELM_REPO}/index.yaml ]; then
        cp ${HELM_REPO}/index.yaml ${ROOT_DIR}/helm-chart/
        MERGE_INDEX="--merge index.yaml"
      fi

      # Update Helm Repository
      helm repo index ./ ${MERGE_INDEX} --url https://github.com/${GITHUB_USER}/${GITHUB_REPO}/releases/download/${VERSION}/
      cp index.yaml ${HELM_REPO}
      cd ${HELM_REPO}
      set +x
      setupAndPushChange
      set -x

      # Tag the repo and create the release on GitHub
      cd ${ROOT_DIR}/metrics
      # Create tag for the release
      git tag -f -a ${VERSION_TAG} -m "${VERSION_TAG}"
      git push -f origin ${VERSION_TAG}

      # Create a tag for the release and push the tag
      # Check that the release exists first
      set +e
      github-release info -t ${VERSION_TAG}
      RETVAL=$?
      set -e

      # Delete the release if it already exists
      if [ $RETVAL -eq 0 ]; then
        echo "Release already exists"
        exit 1
      fi

      # Generate title for the release, based on the tag
      # Sets RELEASE_TITLE and PRE_RELEASE_ARG
      generateReleaseTitle ${VERSION}
      echo "Release Title - ${RELEASE_TITLE}"
      echo "Release Arg   - ${PRE_RELEASE_ARG}"

      # Create new release
      github-release release -t ${VERSION_TAG} --name "${RELEASE_TITLE}" ${PRE_RELEASE_ARG} --description "${RELEASE_DESCRIPTION}"

      # Upload Helm chart to release
      github-release upload -t ${VERSION_TAG} --file ${ROOT_DIR}/helm-chart/${HELM_FILE} --name "${HELM_FILE}"

      # Upload Helm chart to release that has all features enabled
      github-release upload -t ${VERSION_TAG} --file ${ROOT_DIR}/helm-chart/${HELM_FILE} --name "${HELM_ALL_ENABLED_FILE}"

      # Create the PR for the Helm Chart changes if configured
      if [ "${HELM_RELEASE_GITCLONE}" != "null" ]; then
        echo "Creating PR for Metrics Helm Chart Changes for this release"
        NEW_BRANCH="metrics-${VERSION}"
        mkdir -p ${ROOT_DIR}/helm-pr
        cd ${ROOT_DIR}/helm-pr
        git clone ${HELM_RELEASE_GITCLONE} helm-git-repo
        cd helm-git-repo
        git checkout ${HELM_RELEASE_REPO_BRANCH}
        git checkout -b ${NEW_BRANCH}
        cd ${HELM_RELEASE_REPO_FOLDER}
        cp ${ROOT_DIR}/helm-chart/${HELM_FILE} .
        tar -xvf ${HELM_FILE}

        # Patch the registry hostname and org if needed
        if [ ! -z "${HELM_RELEASE_REGISTRY_HOST}" ]; then
          echo "Patching Metrics Helm Chart Docker Registry and Organisation"
          cat ./metrics/values.yaml
          sed -i -e 's/dockerRepository: '"${DOCKER_REGISTRY}"'/dockerRepository: '"${HELM_RELEASE_REGISTRY_HOST}"'/g' ./metrics/values.yaml
          sed -i -e 's/dockerOrganization: '"${DOCKER_ORG}"'/dockerOrganization: '"${HELM_RELEASE_REGISTRY_ORG}"'/g' ./metrics/values.yaml
          echo "Updated Metrics Chart..."
          cat ./metrics/values.yaml
        fi
        rm -rf ./${HELM_FILE}
        git add -A
        git status
        git commit -m "Metrics Release ${VERSION} Helm Chart Changes"
        git push -u origin ${NEW_BRANCH}
        # Now create a PR for the changes
        URL=https://api.github.com/repos/${HELM_RELEASE_REPO_NAME}/pulls
        TITLE="Metrics Release ${VERSION}"
        curl --fail -H "Content-Type: application/json" -H "Authorization: token ${GITHUB_TOKEN}" \
        -d '{"title":"'"${TITLE}"'", "head": "'"${NEW_BRANCH}"'", "base": "'"${HELM_RELEASE_REPO_BRANCH}"'"}' ${URL}
      fi

      set +e
      set +x
      echo "=================================================================================================================="
      echo ""
      echo "RELEASE COMPLETE ================================================================================================="
      echo ""
      echo "Version      : ${VERSION}"
      echo "Base Version : ${LAST_TAG}"
      echo ""
      echo "Helm Chart filename : ${HELM_FILE}"
      echo "Helm Chart URL      : https://github.com/${HELM_REPOSITORY}/releases/download/${VERSION}/${HELM_FILE}"
      echo ""
      echo "=================================================================================================================="

      # If we have a mirror URL for the Helm Chart then output that at the end
      if [ ! -z "${HELM_MIRROR_BASE_URL}" ]; then
        echo ""
        echo "=================================================================================================================="
        echo "Metrics Helm Chart will be mirrored to:"
        echo "${HELM_MIRROR_BASE_URL}${HELM_FILE}"
        echo "=================================================================================================================="
      fi
